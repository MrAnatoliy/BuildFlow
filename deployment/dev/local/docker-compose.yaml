name: "buildflow_dev_local"

services:
  traefik:
    image: traefik:v3.3
    ports:
      - "80:80"
      - "11000:8080" # UI port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../../backend/infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ../../../backend/infrastructure/traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
    networks:
      - bridge-network
  
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    ports:
      - 4180:4180
    volumes:
      - ../../../backend/infrastructure/oauth2-proxy/oauth2-proxy.cfg:/etc/oauth2-proxy.cfg
    command: ['--config','/etc/oauth2-proxy.cfg']
    networks:
      - bridge-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    command: start-dev --import-realm --features=scripts,preview --log-level="INFO"
    ports:
      - 8080:8080
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    volumes:
      - ../../../backend/infrastructure/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - bridge-network

  rabbitmq:
    image: rabbitmq:4.0-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - bridge-network

  flower:
    image: mher/flower
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq//
    command: celery --broker=amqp://guest:guest@rabbitmq// flower
    networks:
      - bridge-network

  # LOCAL MAIL SERVER
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # Web UI port
    networks:
      - bridge-network

  whoami:
    image: traefik/whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`buildflow.api`) && PathPrefix(`/whoami`)
      - traefik.http.routers.whoami.entrypoints=web
      - traefik.http.routers.whoami.middlewares=auth-chain@file,cors@file
      - traefik.http.routers.whoami.service=whoami-service
      - traefik.http.services.whoami-service.loadbalancer.server.port=80
    networks:
      - bridge-network

  auth_service:
    build:
      context: ../../../backend/services/auth_service
    container_name: auth_service
    ports:
      - 8000:8000
    networks:
      - bridge-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth_service.rule=Host(`buildflow.api`) && PathPrefix(`/auth`)
      - traefik.http.routers.auth_service.entrypoints=web
      - traefik.http.routers.auth_service.middlewares=cors@file
      - traefik.http.routers.auth_service.service=auth-service
      - traefik.http.services.auth-service.loadbalancer.server.port=8000

  mail_service:
    build:
      context: ../../../backend/services/mail_service
    container_name: mail_service
    networks:
      - bridge-network

  
  # ----------------- User service bundle -------------------
  # Ports = default + 3

  user_service:
    build: 
      context: ../../../backend/services/user_service
    container_name: user_service
    ports:
      - 8003:8000
    networks:
      - bridge-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.user_service.rule=Host(`buildflow.api`) && PathPrefix(`/user`)
      - traefik.http.routers.user_service.entrypoints=web
      - traefik.http.routers.user_service.middlewares=cors@file,auth-chain@file
      - traefik.http.routers.user_service.service=user_service
      - traefik.http.services.user_service.loadbalancer.server.port=8000

  user_service_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_db
    ports:
     - 5435:5432
    networks:
      - bridge-network
      
  # ---------------------------------------------------------


    # ----------------- Project service bundle -------------------
  # Ports = default + 4

  project_service:
    build: 
      context: ../../../backend/services/project_service
    container_name: project_service
    ports:
      - 8004:8000
    networks:
      - bridge-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.project_service.rule=Host(`buildflow.api`) && (PathPrefix(`/project`) || PathPrefix(`/stage`) || PathPrefix(`/task`) || PathPrefix(`/requirement`) || PathPrefix(`/volume`))
      - traefik.http.routers.project_service.entrypoints=web
      - traefik.http.routers.project_service.middlewares=cors@file,auth-chain@file
      - traefik.http.routers.project_service.service=project_service
      - traefik.http.services.project_service.loadbalancer.server.port=8000

  project_service_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: project_db
    ports:
     - 5436:5432
    networks:
      - bridge-network
      
  # ---------------------------------------------------------



  # ---------- Databases managment and monitoring -----------

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - bridge-network
    depends_on:
      - user_service_db

  # ---------------------------------------------------------



  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000 # API
      - 9001:9001 # Web ui
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: changeme
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"

networks:
  bridge-network:
    driver: bridge

volumes:
  minio-data: