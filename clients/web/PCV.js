import { existsSync, readFileSync, writeFileSync, mkdirSync, copyFileSync } from 'fs';
import { resolve as _resolve, dirname, join } from 'path';
import { request } from 'https';
import { emitKeypressEvents } from 'readline';
const { stdout, stdin } = process;

// =============================================
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
// =============================================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
process.on('exit', () => stdout.write('\x1B[?25h')); //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ


// ANSI-–∫–æ–¥—ã –¥–ª—è —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞
const styles = {
  text: {
    reset: '\x1b[0m',
    underline: '\x1b[4m',
    bold: '\x1b[1m',
    
    // –¶–≤–µ—Ç–∞ –≤ RGB
    sky: '\x1b[38;2;135;206;235m',      //rgb(135, 206, 235)
    red: '\x1b[38;2;247;89;89m',        //rgb(247, 89, 89)
    green: '\x1b[38;2;0;255;0m',        //rgb(40, 207, 76)
    yellow: '\x1b[38;2;255;255;153m',   //rgb(255, 255, 153)
    white: '\x1b[38;2;255;255;255m',    //rgb(255, 255, 255)
    black: '\x1b[38;2;0;0;0m'           //rgb(0, 0, 0)
  }
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
const KEY_EVENTS = {
  UP: 'up',
  DOWN: 'down',
  RETURN: 'return',
  ESCAPE: 'escape'
};

// –ò–∫–æ–Ω–∫–∏
const ICO = {
  check: 'üîé ',
  save: 'üíæ ',
  update: 'üîÑ ',
  add: '‚ûï ',
  go_back: '‚Ü© ',
  close: '‚ùå ',
  dependencies: 'üì¶ ',
  dev_dependencies: 'üîß ',
  overrides: '‚öôÔ∏è ',
  warning: '‚ö†Ô∏è ',
  success: '‚úÖ ',
  error: '‚ùå '
};

// –ú–µ–Ω—é
const MENU = {
  HOME: {
    CHECK_DEPENDENCIES: ICO.check + '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    UPDATE_DEPENDENCIES: ICO.update + '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    CREATE_BACKUP: ICO.save + '–°–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é',
    EXIT: ICO.close + '–ó–∞–∫—Ä—ã—Ç—å PCV'
  },
  UPDATE: {
    DEPENDENCIES: ICO.dependencies + '–û–±–Ω–æ–≤–∏—Ç—å Dependencies',
    DEV_DEPENDENCIES: ICO.dev_dependencies + '–û–±–Ω–æ–≤–∏—Ç—å Dev Dependencies',
    OVERRIDES: ICO.overrides + '–û–±–Ω–æ–≤–∏—Ç—å Overrides',
    UPDATE_ALL: ICO.update + '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    GO_BACK: ICO.go_back + '–í–µ—Ä–Ω—É—Ç—å—Å—è'
  },
  TABLE: {
    UPDATE_TABLE: ICO.update + '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É',
    SELECT_DEPENDENCY: ICO.add + '–í—ã–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
    GO_BACK: ICO.go_back + '–í–µ—Ä–Ω—É—Ç—å—Å—è'
  }
};

// =============================================
// –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
// =============================================

class PackageManager {
  constructor(filePath) {
    this.path = _resolve(filePath);
    this.data = this.load();
    this.backupDir = _resolve(dirname(this.path), 'pcv_backups');
  }

  load() {
    if (!existsSync(this.path)) {
      throw new Error(`–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${this.path}`);
    }
    return JSON.parse(readFileSync(this.path, 'utf-8'));
  }

  save() {
    const content = JSON.stringify(this.data, null, 2);
    writeFileSync(this.path, content);
    return content;
  }

  createBackup() {
    if (!existsSync(this.backupDir)) {
      mkdirSync(this.backupDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = join(this.backupDir, `package_${timestamp}.json`);
    
    copyFileSync(this.path, backupPath);
    return backupPath;
  }

  getDependencies(type) {
    return this.data[type] || {};
  }

  updateDependencies(type, updates) {
    if (!this.data[type]) this.data[type] = {};
    Object.assign(this.data[type], updates);
    return this.save();
  }

  getAllDependencies() {
    return {
      ...this.data.dependencies,
      ...this.data.devDependencies,
      ...(this.data.overrides || {})
    };
  }
}

class VersionChecker {
  constructor() {
    this.cache = new Map();
    this.cacheTTL = 3600000; // 1 —á–∞—Å
  }

  async fetchLatestVersion(packageName, retries = 3) {
    const cached = this.cache.get(packageName);
    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {
      return cached.version;
    }

    for (let i = 0; i < retries; i++) {
      try {
        const version = await this._fetchFromRegistry(packageName);
        this.cache.set(packageName, { version, timestamp: Date.now() });
        return version;
      } catch (error) {
        if (i === retries - 1) throw error;
        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
      }
    }
  }

  _fetchFromRegistry(packageName) {
    return new Promise((resolve, reject) => {
      const options = {
        hostname: 'registry.npmjs.org',
        path: `/${packageName}/latest`,
        method: 'GET',
        timeout: 5000,
        headers: { 'User-Agent': 'PCV/1.0' }
      };

      const req = request(options, (res) => {
        if (res.statusCode === 404) {
          return reject(new Error(`–ü–∞–∫–µ—Ç "${packageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`));
        }
        
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          try {
            resolve(JSON.parse(data).version);
          } catch (e) {
            reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'));
          }
        });
      });

      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
      });

      req.end();
    });
  }

  clearCache() {
    this.cache.clear();
  }
}

// =============================================
// UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
// =============================================

class UI {
  constructor() {
    this.selectedIndex = 0;
    this.menuStack = [];
    this.currentMenu = Object.values(MENU.HOME);
    this.packageManager = new PackageManager('./package.json');
    this.versionChecker = new VersionChecker();
    this.selectedDependencies = new Set();
    this.currentTable = null;
  }

  init() {
    this.setupKeypressHandling();
    this.render();
  }

  render() {
    this.clearConsoleHistory();
    stdout.write('\x1B[?25l');
    this.showLogo();
    this.renderMenu();
  }

  clearConsoleHistory() {
    console.clear();
    
    // For Unix-system (Linux, MacOS)
    if (process.platform !== 'win32') {
      process.stdout.write('\x1B[3J\x1B[H\x1B[2J');
    }
    
    if (process.stdout.isTTY) {
      process.stdout.write('\x1B[2J\x1B[3J\x1B[H\x1Bc');
    }
  }

  showLogo() {
    stdout.write(`
${styles.text.bold}${styles.text.sky}
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù
  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë
  ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë  
  ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù       
${styles.text.reset}
   ‚òÅÔ∏è Created by: Furiozi.
            v2.0
\n`);
  }

  renderMenu() {
    this.currentMenu.forEach((item, index) => {
      if (index === this.selectedIndex) {
        stdout.write(`‚Æû ${styles.text.sky}${styles.text.underline}${styles.text.bold}${item}${styles.text.reset}\n`);
      } else {
        stdout.write(`  ${item}\n`);
      }
    });
  }

  navigateToMenu(menu) {
    this.menuStack.push(this.currentMenu);
    this.currentMenu = menu;
    this.selectedIndex = 0;
    this.render();
  }

  goBack() {
    if (this.menuStack.length > 0) {
      this.currentMenu = this.menuStack.pop();
      this.selectedIndex = 0;
      this.render();
    }
  }

  exit() {
    this.clearConsoleHistory();
    stdout.write('\x1B[?25h'); // –í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å–æ—Ä
    console.log('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
    process.exit();
  }

  showSpinner(text = '') {
    const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
    let i = 0;
    
    const interval = setInterval(() => {
      stdout.write(`\r${frames[i]} ${text}`);
      i = (i + 1) % frames.length;
    }, 100);

    return {
      stop: (message = '') => {
        clearInterval(interval);
        stdout.write('\r\x1b[2K'); // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É
        if (message) console.log(message);
      }
    };
  }

  async showProgressBar(title, promise) {
    const width = 30;
    let progress = 0;
    
    const spinner = this.showSpinner(`${title} [${' '.repeat(width)}] 0%`);
    
    const interval = setInterval(() => {
      if (progress < 90) progress += 5;
      const filled = Math.round(width * progress / 100);
      spinner.stop();
      stdout.write(`\r‚†ã ${title} [${'‚îÄ'.repeat(filled)}${' '.repeat(width - filled)}] ${progress}%`);
    }, 300);

    try {
      const result = await promise;
      clearInterval(interval);
      spinner.stop(`\n${ICO.success} ${title}: –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
      return result;
    } catch (error) {
      clearInterval(interval);
      spinner.stop(`${ICO.error} –û—à–∏–±–∫–∞: ${error.message}`);
      throw error;
    }
  }

  displayResults(versions) {
    // –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    const colWidths = {
      name: 35,
      current: 12,
      latest: 12,
      status: 30
    };
  
    // –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–º–æ–∫
    const border = {
      topLeft: '‚îå',
      top: '‚îÄ',
      topMid: '‚î¨',
      topRight: '‚îê',
      left: '‚îÇ',
      mid: '‚îÇ',
      right: '‚îÇ',
      bottomLeft: '‚îî',
      bottom: '‚îÄ',
      bottomMid: '‚î¥',
      bottomRight: '‚îò',
      hLine: '‚îÄ',
      vLine: '‚îÇ',
      cross: '‚îú',
      middleCross: '‚îº',
      bottomCross: '‚î§'
    };
  
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const centerText = (text, width) => {
      text = String(text);
      const pad = width - text.length;
      const padLeft = Math.floor(pad / 2);
      const padRight = pad - padLeft;
      return ' '.repeat(padLeft) + text + ' '.repeat(padRight);
    };
  
    
    // Function for table styles
    const getStatusStyle = (current, latest) => {
      const normalizeVersion = (v) => v.replace(/^[\^~]/, '');
      const normalizedCurrent = normalizeVersion(current);
      const normalizedLatest = normalizeVersion(latest);
    
      if (latest === '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ') {
        return {
          textColor: styles.text.red,
          statusText: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        };
      } else if (normalizedLatest < normalizedCurrent) {
        return {
          textColor: styles.text.red,
          statusText: `–û—à–∏–±–∫–∞ (${current} > ${latest})`
        };
      } else if (normalizedLatest === normalizedCurrent) {
        return {
          textColor: styles.text.sky,
          statusText: '–ê–∫—Ç—É–∞–ª—å–Ω–∞'
        };
      } else {
        return {
          textColor: styles.text.yellow,
          statusText: `–£—Å—Ç–∞—Ä–µ–ª–∞ (${current} ‚Üí ${latest})`
        };
      }
    };

    const drawTable = (title, data) => {
      if (Object.keys(data).length === 0) return;
  
      console.log(`\n${title}:\n`);
  
      // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã
      let table = `${border.topLeft}${border.top.repeat(colWidths.name)}`;
      table += `${border.topMid}${border.top.repeat(colWidths.current)}`;
      table += `${border.topMid}${border.top.repeat(colWidths.latest)}`;
      table += `${border.topMid}${border.top.repeat(colWidths.status)}${border.topRight}\n`;
  
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
      table += `${border.left}${'–ü–∞–∫–µ—Ç'.padEnd(colWidths.name)}`;
      table += `${border.mid}${'–¢–µ–∫—É—â–∞—è'.padEnd(colWidths.current)}`;
      table += `${border.mid}${'–ü–æ—Å–ª–µ–¥–Ω—è—è'.padEnd(colWidths.latest)}`;
      table += `${border.mid}${centerText('–°—Ç–∞—Ç—É—Å', colWidths.status)}${border.right}\n`;
  
      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      table += `${border.cross}${border.hLine.repeat(colWidths.name)}`;
      table += `${border.middleCross}${border.hLine.repeat(colWidths.current)}`;
      table += `${border.middleCross}${border.hLine.repeat(colWidths.latest)}`;
      table += `${border.middleCross}${border.hLine.repeat(colWidths.status)}${border.bottomCross}\n`;
  
      // –î–∞–Ω–Ω—ã–µ
      Object.entries(data).forEach(([pkg, current]) => {
        const latest = versions[pkg];
        const { textColor, statusText } = getStatusStyle(current, latest);
  
        table += `${border.left}${textColor}${pkg.padEnd(colWidths.name)}`;
        table += `${border.mid}${current.padEnd(colWidths.current)}`;
        table += `${border.mid}${latest.padEnd(colWidths.latest)}`;
        table += `${border.mid}${centerText(statusText, colWidths.status)}${styles.text.reset}${border.right}\n`;
      });
  
      // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã
      table += `${border.bottomLeft}${border.bottom.repeat(colWidths.name)}`;
      table += `${border.bottomMid}${border.bottom.repeat(colWidths.current)}`;
      table += `${border.bottomMid}${border.bottom.repeat(colWidths.latest)}`;
      table += `${border.bottomMid}${border.bottom.repeat(colWidths.status)}${border.bottomRight}\n`;
  
      console.log(table);
    };
  
    drawTable(`${ICO.dependencies} Dependencies`, this.packageManager.getDependencies('dependencies'));
    drawTable(`${ICO.dev_dependencies} Dev Dependencies`, this.packageManager.getDependencies('devDependencies'));
    drawTable(`${ICO.overrides} Overrides`, this.packageManager.getDependencies('overrides'));
  }
  
  async checkVersions() {
    try {
      const deps = this.packageManager.getAllDependencies();
      const packages = Object.keys(deps);
      
      if (packages.length === 0) {
        console.log('\nüï≥  –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.\n');
        return;
      }

      const versions = await this.showProgressBar(
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π',
        Promise.all(packages.map(async pkg => {
          try {
            return { [pkg]: await this.versionChecker.fetchLatestVersion(pkg) };
          } catch {
            return { [pkg]: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' };
          }
        })).then(results => Object.assign({}, ...results))
      );

      this.displayResults(versions);
      console.log('\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
    } catch (error) {
      console.error(`\n${ICO.error} –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async updateTable(tableName) {
    try {
      const current = this.packageManager.getDependencies(tableName);
      const packages = Object.keys(current);
      
      if (packages.length === 0) {
        console.log(`\n${ICO.warning} –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞.\n`);
        return;
      }

      const updates = await this.showProgressBar(
        `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${tableName}`,
        Promise.all(packages.map(async pkg => {
          try {
            return { [pkg]: await this.versionChecker.fetchLatestVersion(pkg) };
          } catch {
            return { [pkg]: current[pkg] }; // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        })).then(results => Object.assign({}, ...results))
      );

      this.packageManager.updateDependencies(tableName, updates);
      console.log(`\n${ICO.success} –¢–∞–±–ª–∏—Ü–∞ ${tableName} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n`);
    } catch (error) {
      console.error(`\n${ICO.error} –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      this.goBack();
    }
  }

  async updateAll() {
    try {
      const allDeps = this.packageManager.getAllDependencies();
      const packages = Object.keys(allDeps);
      
      if (packages.length === 0) {
        console.log('\nüï≥  –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.\n');
        return;
      }

      const updates = await this.showProgressBar(
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        Promise.all(packages.map(async pkg => {
          try {
            return { [pkg]: await this.versionChecker.fetchLatestVersion(pkg) };
          } catch {
            return { [pkg]: allDeps[pkg] };
          }
        })).then(results => Object.assign({}, ...results))
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      if (this.packageManager.data.dependencies) {
        this.packageManager.updateDependencies('dependencies', updates);
      }
      if (this.packageManager.data.devDependencies) {
        this.packageManager.updateDependencies('devDependencies', updates);
      }
      if (this.packageManager.data.overrides) {
        this.packageManager.updateDependencies('overrides', updates);
      }

      console.log(`\n${ICO.success} –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n`);
    } catch (error) {
      console.error(`\n${ICO.error} –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      this.goBack();
    }
  }

  createBackup() {
    try {
      const backupPath = this.packageManager.createBackup();
      console.log(`\n${ICO.success} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}\n`);
    } catch (error) {
      console.error(`\n${ICO.error} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}\n`);
    }
  }

  // =============================================
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é
  // =============================================

  handleSelection(selectedItem) {
    const menuValues = Object.values;
    
    switch (selectedItem) {
      case MENU.HOME.CHECK_DEPENDENCIES:
        this.checkVersions();
        break;
        
      case MENU.HOME.UPDATE_DEPENDENCIES:
        this.navigateToMenu(menuValues(MENU.UPDATE));
        break;
        
      case MENU.HOME.CREATE_BACKUP:
        this.createBackup();
        break;
        
      case MENU.HOME.EXIT:
        this.exit();
        break;
        
      case MENU.UPDATE.DEPENDENCIES:
        this.currentTable = 'dependencies';
        this.navigateToMenu(menuValues(MENU.TABLE));
        break;
        
      case MENU.UPDATE.DEV_DEPENDENCIES:
        this.currentTable = 'devDependencies';
        this.navigateToMenu(menuValues(MENU.TABLE));
        break;
        
      case MENU.UPDATE.OVERRIDES:
        this.currentTable = 'overrides';
        this.navigateToMenu(menuValues(MENU.TABLE));
        break;
        
      case MENU.UPDATE.UPDATE_ALL:
        this.confirmAction('–û–±–Ω–æ–≤–∏—Ç—å –í–°–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?', () => this.updateAll());
        break;
        
      case MENU.UPDATE.GO_BACK:
        this.goBack();
        break;
        
      case MENU.TABLE.UPDATE_TABLE:
        this.confirmAction(`–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É ${this.currentTable}?`, 
          () => this.updateTable(this.currentTable));
        break;
        
      case MENU.TABLE.SELECT_DEPENDENCY:
        this.selectDependencies();
        break;
        
      case MENU.TABLE.GO_BACK:
        this.goBack();
        break;
    }
  }

  selectDependencies() {
    const table = this.packageManager.getDependencies(this.currentTable);
    const packages = Object.keys(table);
    let currentIndex = 0;
    
    if (packages.length === 0) {
      console.log(`\n${ICO.warning} –¢–∞–±–ª–∏—Ü–∞ ${this.currentTable} –ø—É—Å—Ç–∞.\n`);
      return;
    }
    
    const render = () => {
      console.clear();
      console.log(`${ICO.add} –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (${this.currentTable}):\n`);
      
      packages.forEach((pkg, i) => {
        const prefix = i === currentIndex ? '‚Æû ' : '  ';
        const selector = this.selectedDependencies.has(pkg) ? '‚óÜ' : '‚óá';
        console.log(`${prefix}${selector} ${pkg}`);
      });
      
      console.log('\n–ü—Ä–æ–±–µ–ª: –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å  Enter: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å  Esc: –æ—Ç–º–µ–Ω–∞');
    };
    
    const handleInput = (_, key) => {
      if (key.name === KEY_EVENTS.UP && currentIndex > 0) {
        currentIndex--;
      } else if (key.name === KEY_EVENTS.DOWN && currentIndex < packages.length - 1) {
        currentIndex++;
      } else if (key.name === 'space') {
        const pkg = packages[currentIndex];
        if (this.selectedDependencies.has(pkg)) {
          this.selectedDependencies.delete(pkg);
        } else {
          this.selectedDependencies.add(pkg);
        }
      } else if (key.name === KEY_EVENTS.RETURN) {
        if (this.selectedDependencies.size > 0) {
          this.confirmAction(
            `–û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${this.selectedDependencies.size}) –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?`,
            () => this.updateSelectedDependencies()
          );
          return;
        }
      } else if (key.name === KEY_EVENTS.ESCAPE) {
        this.selectedDependencies.clear();
        this.goBack();
        return;
      }
      
      render();
    };
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∞–≤–∏—à
    stdin.removeAllListeners('keypress');
    stdin.on('keypress', handleInput);
    
    render();
  }

  async updateSelectedDependencies() {
    if (this.selectedDependencies.size === 0) {
      console.log('\nüï≥  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.\n');
      return;
    }
    
    try {
      const updates = {};
      const packages = Array.from(this.selectedDependencies);
      
      await this.showProgressBar(
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        Promise.all(packages.map(async pkg => {
          try {
            updates[pkg] = await this.versionChecker.fetchLatestVersion(pkg);
          } catch {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            updates[pkg] = this.packageManager.getDependencies(this.currentTable)[pkg];
          }
        }))
      );
      
      this.packageManager.updateDependencies(this.currentTable, updates);
      this.selectedDependencies.clear();
      console.log(`\n${ICO.success} –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n`);
    } catch (error) {
      console.error(`\n${ICO.error} –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      this.goBack();
    }
  }

  confirmAction(message, action) {
    console.log(`\n${ICO.warning} ${message} (y/n)`);
    
    const handleInput = (_, key) => {
      if (key.name === 'y') {
        stdin.removeAllListeners('keypress');
        this.setupKeypressHandling();
        action();
      } else if (key.name === 'n' || key.name === KEY_EVENTS.ESCAPE) {
        stdin.removeAllListeners('keypress');
        this.setupKeypressHandling();
        this.render();
      }
    };
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∞–≤–∏—à
    stdin.removeAllListeners('keypress');
    stdin.on('keypress', handleInput);
  }

  // =============================================
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
  // =============================================

  setupKeypressHandling() {
    emitKeypressEvents(stdin);
    if (stdin.isTTY) stdin.setRawMode(true);
    
    stdin.removeAllListeners('keypress');
    stdin.on('keypress', (_, key) => {
      if (key.ctrl && key.name === 'c') {
        this.exit();
      } else {
        this.handleInput(key);
      }
    });
  }

  handleInput(key) {
    if (key.name === KEY_EVENTS.UP && this.selectedIndex > 0) {
      this.selectedIndex--;
    } else if (key.name === KEY_EVENTS.DOWN && this.selectedIndex < this.currentMenu.length - 1) {
      this.selectedIndex++;
    } else if (key.name === KEY_EVENTS.RETURN) {
      this.handleSelection(this.currentMenu[this.selectedIndex]);
      return;
    }
    
    this.render();
  }
}

// =============================================
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// =============================================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
process.on('exit', () => {
  stdout.write('\x1B[?25h');
  new UI().clearConsoleHistory();
});

process.on('SIGINT', () => {
  new UI().clearConsoleHistory();
  process.exit();
});

process.on('uncaughtException', (err) => {
  new UI().clearConsoleHistory();
  console.error(`${ICO.error} –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try {
  const ui = new UI();
  ui.init();
} catch (error) {
  console.error(`${ICO.error} ${error.message}`);
  process.exit(1);
}